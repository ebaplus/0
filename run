# Nove verzije aplikacija
$latestVersions = @{
    "asseco"       = "3.20"
    "safenet"      = "8.3"
    "scmanagement" = "6.3"
    "activ"        = "7.1"
}

# Map of related keywords
$keywordGroups = @{
    "asseco"       = @("asseco", "signergy", "unicredit")
    "scmanagement" = @("scmanagement", "e-baplus")
    "safenet"      = @("safenet", "authentication")
    "activ"        = @("activ", "card")
}

$appFlags = @{}
$found    = @{}

# Read registry uninstall entries
$uninstallPaths = @(
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

foreach ($path in $uninstallPaths) {
    $apps = Get-ItemProperty $path -ErrorAction SilentlyContinue
    foreach ($app in $apps) {
        $name = $app.DisplayName
        $version = $app.DisplayVersion
        if ($name -and $version) {
            foreach ($group in $keywordGroups.GetEnumerator()) {
                $key = $group.Key
                foreach ($keyword in $group.Value) {
                    if ($name.ToLower().Contains($keyword)) {
                        $verCurrent  = ($version -split "\.")[0..1] -join "."
                        $verExpected = $latestVersions[$key]
                        $status = if ($verExpected -and ([version]$verCurrent -lt [version]$verExpected)) {
                            "upgrade"
                        } elseif ($verExpected -and ([version]$verCurrent -ge [version]$verExpected)) {
                            "ignore"
                        } else {
                            "ignore"
                        }
                        $found[$key] = "$name - Verzija: $version ($status)"
                        $appFlags[$key] = $status
                        break
                    }
                }
            }
        }
    }
}

# Missing apps
foreach ($key in $latestVersions.Keys) {
    if (-not $appFlags.ContainsKey($key)) {
        $appFlags[$key] = "install"
        $found[$key] = "$key - nije pronadjen (install)"
    }
}

# SafeNet / Activ logic
$safenetStatus = $appFlags["safenet"]
$activStatus   = $appFlags["activ"]

if (($safenetStatus -ne "install") -and ($activStatus -ne "install")) {
    Write-Host "Podrska za USB i Karticu je instalirana na ovom racunalu." -ForegroundColor Cyan
    $appFlags["safenet"] = "ignore"
    $appFlags["activ"]   = "ignore"
}
elseif ($safenetStatus -eq "install" -and $activStatus -eq "install") {
    $appFlags["safenet"] = "install"
    $appFlags["activ"]   = "ignore"
}
elseif ($safenetStatus -ne "install") {
    $appFlags["activ"] = "ignore"
}
elseif ($activStatus -ne "install") {
    $appFlags["safenet"] = "ignore"
}

# Pokretanje logike
chcp 65001 > $null
[Console]::OutputEncoding = [System.Text.UTF8Encoding]::new()
Clear-Host

# Header
Write-Host "==============================" -ForegroundColor Green
Write-Host " EbaPlus Automatski Installer " -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Green
Write-Host ""

# Folder kreacija
Write-Host -NoNewline "Kreirali smo folder " -ForegroundColor Green
Write-Host -NoNewline "C:\eba" -ForegroundColor Yellow
Write-Host " unutar kojeg ce se nalaziti sve potrebne instalacije, upute i linkovi.`n" -ForegroundColor Green

$dest = "C:\eba"
New-Item -ItemType Directory -Force -Path $dest | Out-Null

# Log inicijalizacija
$is64Bit = [Environment]::Is64BitOperatingSystem
$logPath = "$dest\log.txt"
Add-Content $logPath "`n[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] Sistem: $([Int]$is64Bit * 32 + 32)-bitni OS detektovan.`n"

Add-Content $logPath "[INFO] Stanje aplikacija:"

Write-Host "`nDEBUG prikaz detekcije aplikacija:" -ForegroundColor Yellow
foreach ($entry in $found.GetEnumerator()) {
    Write-Host "$($entry.Key): $($entry.Value)"
    Add-Content $logPath " - $($entry.Value)"
}

Write-Host "`nDEBUG prikaz statusa instalacija:" -ForegroundColor Yellow
$appFlags.GetEnumerator() | ForEach-Object { Write-Host "$($_.Key): $($_.Value)" }

Write-Host "`nPodaci su upisani u log: $logPath" -ForegroundColor Cyan
