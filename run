# ===============================
# EbaPlus Automated Installer
# ===============================

# Versions
$latestVersions = @{
    "asseco"       = "3.20"
    "safenet"      = "8.3"
    "scmanagement" = "6.3"
    "activ"        = "7.1"
}

# Keyword groups
$keywordGroups = @{
    "asseco"       = @("asseco", "signergy", "unicredit")
    "scmanagement" = @("scmanagement", "e-baplus")
    "safenet"      = @("safenet", "authentication")
    "activ"        = @("activ", "card")
}

$appFlags = @{}
$found    = @{}
 
# Registry scan
$uninstallPaths = @(
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

foreach ($path in $uninstallPaths) {
    $apps = Get-ItemProperty $path -ErrorAction SilentlyContinue
    foreach ($app in $apps) {
        $name = $app.DisplayName
        $version = $app.DisplayVersion
        if ($name -and $version) {
            foreach ($group in $keywordGroups.GetEnumerator()) {
                $key = $group.Key
                foreach ($keyword in $group.Value) {
                    if ($name.ToLower().Contains($keyword)) {
                        $verCurrent  = ($version -split "\.")[0..1] -join "."
                        $verExpected = $latestVersions[$key]
                        $status = if ($verExpected -and ([version]$verCurrent -lt [version]$verExpected)) {
                            "upgrade"
                        } else {
                            "ignore"
                        }
                        $found[$key] = "$name - Verzija: $version ($status)"
                        $appFlags[$key] = $status
                        break
                    }
                }
            }
        }
    }
}

# Missing apps
foreach ($key in $latestVersions.Keys) {
    if (-not $appFlags.ContainsKey($key)) {
        $appFlags[$key] = "install"
        $found[$key] = "$key - nije pronadjen (install)"
    }
}

# SafeNet / Activ auto logic
$safenetInstalled = $appFlags["safenet"] -ne "install"
$activInstalled   = $appFlags["activ"]   -ne "install"

if ($activInstalled) {
    $useCard = $true
    Write-Host "ActivClient detected — installing Card version." -ForegroundColor Cyan
} elseif ($safenetInstalled) {
    $useCard = $false
    Write-Host "SafeNet detected — installing USB version." -ForegroundColor Cyan
} else {
    $useCard = $false
    Write-Host "Neither found — defaulting to USB (SafeNet + SignErgy)." -ForegroundColor Yellow
}

# ===============================
# Logging & setup
# ===============================
chcp 65001 > $null
[Console]::OutputEncoding = [System.Text.UTF8Encoding]::new()
Clear-Host

Write-Host "==============================" -ForegroundColor Green
Write-Host " EbaPlus Automatski Installer " -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Green
Write-Host ""

$dest = "C:\eba"
if (-not (Test-Path $dest)) { New-Item -ItemType Directory -Path $dest | Out-Null }

$is64Bit = [Environment]::Is64BitOperatingSystem
$logPath = "$dest\log.txt"
Add-Content $logPath "`n[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] Sistem: $([Int]$is64Bit * 32 + 32)-bitni OS detektovan.`n"
Add-Content $logPath "[INFO] Stanje aplikacija:"

foreach ($entry in $found.GetEnumerator()) {
    Write-Host "$($entry.Key): $($entry.Value)"
    Add-Content $logPath " - $($entry.Value)"
}

Write-Host "`nProceeding to installation..." -ForegroundColor Green
Add-Content $logPath "`nProceeding to installation..."

# ===============================
# Uninstall old versions
# ===============================
foreach ($path in $uninstallPaths) {
    $apps = Get-ItemProperty $path -ErrorAction SilentlyContinue
    foreach ($app in $apps) {
        foreach ($group in $keywordGroups.GetEnumerator()) {
            $key = $group.Key
            foreach ($keyword in $group.Value) {
                if ($app.DisplayName -and $app.DisplayName.ToLower().Contains($keyword)) {
                    if ($appFlags[$key] -eq "upgrade") {
                        Write-Host "Removing old version of $($app.DisplayName)..." -ForegroundColor Red
                        Add-Content $logPath "[ACTION] Uninstalling: $($app.DisplayName)"
                        Start-Process "msiexec.exe" -ArgumentList "/x $($app.PSChildName) /quiet /norestart" -Wait
                    }
                }
            }
        }
    }
}

# ===============================
# Install latest versions
# ===============================
# Download SignErgy ZIP
$signergyZip = "$dest\UniCredit_SignErgy_Installer_new.zip"
Invoke-WebRequest -Uri "https://www.unicredit.ba/content/dam/cee2020-pws-bh1/Poduzetnici/Proizvodi%20i%20usluge/Dokumenti/UniCredit_SignErgy_Installer_new.zip" -OutFile $signergyZip
Expand-Archive -Path $signergyZip -DestinationPath $dest -Force
Remove-Item $signergyZip -Force

# Download e-baPlus
Start-BitsTransfer -Source "https://www.unicredit.ba/content/dam/cee2020-pws-bh1/Poduzetnici/Proizvodi%20i%20usluge/Dokumenti/e-baPlus%20SCManagement_v6.3.1_x64_bin.zip" -Destination "$dest\e-baPlus_SCManagement.zip"
Expand-Archive -Path "$dest\e-baPlus_SCManagement.zip" -DestinationPath "$dest" -Force
Remove-Item "$dest\e-baPlus_SCManagement.zip"

# Card or USB support
if ($useCard) {
    Invoke-WebRequest -Uri "https://www.unicredit.ba/content/dam/cee2020-pws-bh1/Poduzetnici/Proizvodi%20i%20usluge/Dokumenti/ActivClient%207.1.0%20x64%20FIX168.exe" -OutFile "$dest\ActivClient.exe"
} else {
    Start-BitsTransfer -Source "https://www.unicredit.ba/content/dam/cee2020-pws-bh1/Poduzetnici/Proizvodi%20i%20usluge/Dokumenti/SafeNetAuthenticationClient-8-x64-8.3.msi.zip" -Destination "$dest\SafeNetAuthenticationClient.zip"
    Expand-Archive -Path "$dest\SafeNetAuthenticationClient.zip" -DestinationPath "$dest" -Force
    Remove-Item "$dest\SafeNetAuthenticationClient.zip"
}

# Install SignErgy
$signergyExe = Get-ChildItem -Path $dest -Filter "UniCredit_SignErgy_Installer.exe" -Recurse | Select-Object -First 1
if ($signergyExe) {
    Write-Host "Installing SignErgy..." -ForegroundColor Cyan
    Start-Process $signergyExe.FullName -ArgumentList "/SP- /VERYSILENT /NORESTART /SUPPRESSMSGBOXES" -Wait
}

# Install e-baPlus
Write-Host "Installing e-baPlus..." -ForegroundColor Cyan
Start-Process "$dest\e-baPlus_SCManagement_x64.exe" -ArgumentList "/S /v/qn" -Wait

# Install SafeNet or Activ
if ($useCard) {
    Write-Host "Installing ActivClient..." -ForegroundColor Cyan
    try {
        Start-Process "$dest\ActivClient.exe" -ArgumentList "/quiet /norestart" -Wait
    } catch {
        Write-Host "Molimo dovršite instalaciju ako se pojavi prozor..." -ForegroundColor Yellow
    }
} else {
    Write-Host "Installing SafeNet..." -ForegroundColor Cyan
    Start-Process "msiexec.exe" -ArgumentList "/i `"$dest\SafeNetAuthenticationClient-8-x64-8.3.msi`" /quiet /norestart" -Wait
}

# ===============================
# Shortcuts & finish
# ===============================
$desktop = [Environment]::GetFolderPath("Desktop")
$url = "https://ebaplus.unicreditbank.ba/ebaPlus/"
"[InternetShortcut]`nURL=$url" | Set-Content -Encoding ASCII -Path "$desktop\e-baPlus.url"

Write-Host "`nInstalacija završena. Sve datoteke i upute se nalaze u C:\eba" -ForegroundColor Green
Add-Content $logPath "`nInstallation complete."
